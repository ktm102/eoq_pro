name: Build EOQ Pro
on: [workflow_dispatch, push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install tkinter on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: Install PyInstaller
        run: python -m pip install --upgrade pip pyinstaller

      - name: Build app
        shell: bash
        env:
          PYI_KEY: ${{ secrets.PYI_KEY }}
        run: |
          ADDDATA=""; [[ -f brand_logo.svg ]] && ADDDATA="--add-data brand_logo.svg:."
          ICON=""; if [[ "$RUNNER_OS" == "Windows" && -f app.ico ]]; then ICON="--icon app.ico"; fi
          if [[ "$RUNNER_OS" == "macOS" && -f app.icns ]]; then ICON="--icon app.icns"; fi
          KEYOPT=""; [[ -n "${PYI_KEY}" ]] && KEYOPT="--key ${PYI_KEY}"
          python -m PyInstaller --noconsole --onefile --name EOQ_Pro $ADDDATA $ICON $KEYOPT eoq_pro.py

      - name: Package per OS (no source in ZIP)
        shell: bash
        run: |
          mkdir EOQ_Pro_Demo
          # NO SOURCE: niente cp eoq_pro.py
          [ -f Guida_EOQ_Pro_Semplice_compact.pdf ] && cp Guida_EOQ_Pro_Semplice_compact.pdf EOQ_Pro_Demo/Guida_EOQ_Pro.pdf
          [ -f Guida_EOQ_Pro_Semplice.txt ] && cp Guida_EOQ_Pro_Semplice.txt EOQ_Pro_Demo/Guida_EOQ_Pro.txt
          [ -f README_EOQ_Pro_Semplice.md ] && cp README_EOQ_Pro_Semplice.md EOQ_Pro_Demo/README.md
          [ -f EULA.txt ] && cp EULA.txt EOQ_Pro_Demo/
          [ -f Privacy_Policy.txt ] && cp Privacy_Policy.txt EOQ_Pro_Demo/
          [ -f eoq_demo_sample.csv ] && cp eoq_demo_sample.csv EOQ_Pro_Demo/
          [ -f brand_logo.svg ] && cp brand_logo.svg EOQ_Pro_Demo/
          [ -f VERSION ] && cp VERSION EOQ_Pro_Demo/

          if [ "$RUNNER_OS" = "Windows" ]; then
            cp dist/EOQ_Pro.exe EOQ_Pro_Demo/
            pwsh -NoProfile -Command "Compress-Archive -Path 'EOQ_Pro_Demo\*' -DestinationPath 'eoq_pro_windows.zip' -Force"
            pwsh -NoProfile -Command "$z=[IO.Compression.ZipFile]::OpenRead('eoq_pro_windows.zip');$bad=$false;foreach($e in $z.Entries){if($e.FullName.ToLower().EndsWith('.py')){$bad=$true;Write-Host 'Trovato sorgente nello ZIP:' $e.FullName}};$z.Dispose();if($bad){exit 1}else{Write-Host 'Verifica OK: nessun .py nello ZIP.'}"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            if [ -d dist/EOQ_Pro.app ]; then cp -R dist/EOQ_Pro.app EOQ_Pro_Demo/; else cp dist/EOQ_Pro EOQ_Pro_Demo/; fi
            ditto -c -k --sequesterRsrc --keepParent "EOQ_Pro_Demo" "eoq_pro_macos.zip"
            unzip -l eoq_pro_macos.zip | awk '{print tolower($0)}' | grep -E "\.py$" && { echo 'ERRORE: trovati .py nello ZIP'; exit 1; } || echo 'Verifica OK: nessun .py nello ZIP.'
          else
            cp dist/EOQ_Pro EOQ_Pro_Demo/
            zip -r eoq_pro_linux.zip EOQ_Pro_Demo >/dev/null
            unzip -l eoq_pro_linux.zip | awk '{print tolower($0)}' | grep -E "\.py$" && { echo 'ERRORE: trovati .py nello ZIP'; exit 1; } || echo 'Verifica OK: nessun .py nello ZIP.'
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            eoq_pro_windows.zip
            eoq_pro_macos.zip
            eoq_pro_linux.zip
          if-no-files-found: ignore
